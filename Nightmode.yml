blueprint:
  name: Routine - Nachtmodus
  description: >
    Schaltet bestimmte Lampen und Schalter aus, wenn der Nachtmodus aktiviert wird.

  domain: automation
  input:
    night_mode_entity:
      name: Nachtmodus-Schalter
      description: Der Schalter, der den Nachtmodus aktiviert/deaktiviert.
      selector:
        entity:
    lights_to_keep_on:
      name: Lampen die an bleiben
      description: Wählen Sie die Lampen aus, die eingeschaltet bleiben sollen.
      selector:
        target:
          entity:
            domain: light
    switches_to_keep_on:
      name: Schalter die an bleiben
      description: Wählen Sie die Schalter aus, die eingeschaltet bleiben sollen, oder wählen Sie "Alle Schalter einschalten" für alle Schalter einschalten.
      default: "Alle Schalter einschalten"  # Standardwert auf "Alle Schalter einschalten" gesetzt
      selector:
        target:
          entity:
            domain: switch
    light_blocker_entity:
      name: Blocker für Lampen (Optional)
      description: Die Lampen werden nicht ausgeschaltet, wenn dieser Schalter den angegebenen Zustand hat.
      default: none
      selector:
        entity:
    switch_blocker_entity:
      name: Blocker für Schalter (Optional)
      description: Die Schalter werden nicht ausgeschaltet, wenn dieser Schalter den angegebenen Zustand hat.
      default: none
      selector:
        entity:

mode: restart
max_exceeded: silent

variables:
  all_lights: "{{ states.light | selectattr('state', 'eq', 'on') | map(attribute='entity_id') | list }}"
  all_switches: "{{ states.switch | selectattr('state', 'eq', 'on') | map(attribute='entity_id') | list }}"
  lights_on: "{{ lights_to_keep_on | selectattr('state', 'eq', 'on') | map(attribute='entity_id') | list }}"
  switches_on: "{{ all_switches if 'Alle Schalter einschalten' in switches_to_keep_on else switches_to_keep_on | selectattr('state', 'eq', 'on') | map(attribute='entity_id') | list }}"
  lights_off: "{{ all_lights | reject('in', lights_on) | list }}"
  switches_off: "{{ all_switches | reject('in', switches_on) | list }}"


trigger:
  - platform: state
    entity_id: !input night_mode_entity
    to: "on"
  - platform: state
    entity_id: !input night_mode_entity
    to: "off"

action:
  - choose:
      # Nachtmodus aktiviert
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'on' }}"
        sequence:
          - choose:
              # Lights ausschalten
              - conditions:
                  - "{{ lights_off | difference([light_blocker_entity]) | list }}"
                sequence:
                  - service: light.turn_off
                    entity_id: "{{ lights_off | difference([light_blocker_entity]) | join(',') }}"
              # Switches ausschalten
              - conditions:
                  - "{{ switches_off | difference([switch_blocker_entity]) | list }}"
                sequence:
                  - service: switch.turn_off
                    entity_id: "{{ switches_off | difference([switch_blocker_entity]) | join(',') }}"



