


blueprint:
  name: My Personal Motion Activation Blueprint
  description: >
    # YAMA Radio Mod V10


    Turn on lights or scenes when motion is detected. 
    
    Four different scenes can be defined depending on time of day.
    
    
    For Details see this forum post:
    
    https://community.home-assistant.io/t/yama-yet-another-motion-automation-scenes-ambient-light-and-some-conditions/257062?u=networkingcat
    
    
    Capabilitys:

     - Trigger on motion (in fact can be triggered by anything that switches between “on” and off")
     - Wait time for turning off
     - Only run if entity is in desired state (optional)
     - Sun elevation check (optional)
     - 4 Scenes for different times of day (optional)
     - Ambient support with time frame (optional)
     - Default scene when motion stops (optional)
     - “no motion blocker” with user choosable state (optional)
     - Play Radio if Motion detected
  domain: automation
#  source_url: https://gist.github.com/networkingcat/a1876d7e706e07c8bdcf974113940fb8
  input:
    motion_entity:
      name: Motion Sensor
      description: Motion Sensor or a group with Motion Sensors (But can be anything switching between "on" and "off")
      selector:
        entity:
    light_target:
      name: Light
      selector:
        target:
          entity:
            domain: light
    no_motion_wait:
      name: Wait time
      description: Time to leave the light on after last motion is detected.
      default: 120
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds            
    automation_blocker_01:
      name: Automation Blocker 01 (Optional)
      description: Only run if this boolean is in desired state (see next input)
      default:
      selector:
        entity:
    automation_blocker_boolean_01:
      name: Automation Blocker Chooser 01 (Optional)
      description: Desired state of automation blocker, choose on for on and off for off
      default: false
      selector:
        boolean: 
    automation_blocker_02:
      name: Automation Blocker 02 (Optional)
      description: Only run if this boolean is in desired state (see next input)
      default:
      selector:
        entity:
    automation_blocker_boolean_02:
      name: Automation Blocker Chooser 02 (Optional)
      description: Desired state of automation blocker, choose on for on and off for off
      default: false
      selector:
        boolean: 
    automation_blocker_03:
      name: Automation Blocker 03 (Optional)
      description: Only run if this boolean is in desired state (see next input)
      default:
      selector:
        entity:
    automation_blocker_boolean_03:
      name: Automation Blocker Chooser 03 (Optional)
      description: Desired state of automation blocker, choose on for on and off for off
      default: false
      selector:
        boolean: 
    no_motion_blocker:
      name: No Motion Blocker (Optional)
      description: No motion sequence is not run if this boolean is in desired state (see next input)
      default:
      selector:
        entity:
    no_motion_blocker_boolean:
      name: No Motion Chooser (Optional)
      description: Desired state of no motion blocker, choose on for on and off for off
      default: false
      selector:
        boolean:         
    elevation_check:
      name: Sun elevation check (Optional)
      description: This is the angle between the sun and the horizon. Negative values mean the sun is BELOW the horizon.
      default: none
      selector:
        number:
          min: -90
          max: 90
          unit_of_measurement: degrees
    scene_ambient:
      name: Ambient Scene (Optional)
      description: Scene for ambient state. Will be activated when no motion is detected.
      default: scene.none
      selector:
        entity:
          domain: scene
    time_scene_ambient_start:
      name: Ambient time frame start (Optional)
      description: Time from which on ambient scene will be activated
      default: "00:00:00"
      selector:
        time:
    time_scene_ambient_end:
      name: Ambient time frame end (Optional)
      description: Time from which on ambient scene will be not activated
      default: "00:00:00"
      selector:
        time:
    scene_morning:
      name: Scene for the morning (Optional)
      default: scene.none
      selector:
        entity:
          domain: scene
    time_scene_morning:
      name: Time for the morning scene (Optional)
      description: A time input which defines the time from which on the scene will be activated if motion is detected.
      default: "00:00:00"
      selector:
        time:
    scene_day:
      name: Scene for the bright day (Optional)
      default: scene.none
      selector:
        entity:
          domain: scene
    time_scene_day:
      name: Time for the day scene (Optional)
      description: A time input which defines the time from which on the scene will be activated if motion is detected.
      default: "00:00:00"
      selector:
        time:
    scene_evening:
      name: Scene for the evening (Optional)
      default: scene.none
      selector:
        entity:
          domain: scene
    time_scene_evening:
      name: Time for the evening scene (Optional)
      description: A time input which defines the time from which on the scene will be activated if motion is detected.
      default: "00:00:00"
      selector:
        time:
    scene_night:
      name: Scene for the dark night (Optional)
      default: scene.none
      selector:
        entity:
          domain: scene
    time_scene_night:
      name: Time for the night scene (Optional)
      description: A time input which defines the time from which on the scene will be activated if motion is detectedd.
      default: "00:00:00"
      selector:
        time:
    scene_no_motion:
      name: Default scene for no motion (Optional)
      description: Set this Scene if you want to activate a scene if motion stops
      default: scene.none
      selector:
        entity:
          domain: scene
    radio_target:
      name: Radio
      description: The radio to control (Optional).
      default: 
      selector:
        entity:
          domain: media_player
    radio_url:
      name: "Radio URL"
      default: "http://example.com/stream.url"  # Setze hier die Standard-URL deines bevorzugten Radiosenders
    morning_time:
      name: "Radio Volume (Morning)"
      description: "When does the morning time start?"
      default: "04:30:00"
      selector:
        time:

    morning_volume:
      name: Radio Volume (Morning)
      description: Volume level for the radio in the morning.
      default: 
      selector:
        number:
          min: 0
          max: 100
          mode: slider
          unit_of_measurement: "%"

    daytime_time:
      name: "Start time for daytime"
      description: "When does the daytime start?"
      default: "12:00:00"
      selector:
        time:

    daytime_volume:
      name: Daytime Volume
      description: Volume level for the radio in the daytime.
      default: 
      selector:
        number:
          min: 0
          max: 100
          mode: slider
          unit_of_measurement: "%"

    evening_time:
      name: "Start time for evening"
      description: "When does the evening start?"
      default: "18:00:00"
      selector:
        time: 

    evening_volume:
      name: Evening Volume
      description: Volume level for the radio in the evening.
      default: 
      selector:
        number:
          min: 0
          max: 100
          mode: slider
          unit_of_measurement: "%"


mode: restart
max_exceeded: silent

variables:
  scene_ambient: !input scene_ambient
  scene_morning: !input scene_morning
  scene_day: !input scene_day
  scene_evening: !input scene_evening
  scene_night: !input scene_night
  automation_blocker_01: !input automation_blocker_01
  automation_blocker_boolean_01 : !input automation_blocker_boolean_01
  automation_blocker_02: !input automation_blocker_02
  automation_blocker_boolean_02 : !input automation_blocker_boolean_02
  automation_blocker_03: !input automation_blocker_03
  automation_blocker_boolean_03 : !input automation_blocker_boolean_03
  no_motion_blocker: !input no_motion_blocker
  no_motion_blocker_boolean: !input no_motion_blocker_boolean
  elevation_check: !input elevation_check
  scene_no_motion: !input scene_no_motion
  motion_entity: !input motion_entity

trigger:
  - platform: state
    entity_id: !input motion_entity
    from: "off"
    to: "on"
  - platform: state
    entity_id: !input motion_entity
    from: "on"
    to: "off"
    for: !input no_motion_wait
      

# All Conditions must be true
condition:
   # Check if automation blocker exist or is in desired state, otherwise do not run
  - condition: or
    conditions:
      - "{{ automation_blocker_01 == none }}"
      - "{{ automation_blocker_boolean_01 and states[automation_blocker_01].state == 'on' }}"
      - "{{ not automation_blocker_boolean_01 and states[automation_blocker_01].state == 'off' }}"
   # Check if automation blocker exist or is in desired state, otherwise do not run
  - condition: or
    conditions:
      - "{{ automation_blocker_02 == none }}"
      - "{{ automation_blocker_boolean_02 and states[automation_blocker_02].state == 'on' }}"
      - "{{ not automation_blocker_boolean_02 and states[automation_blocker_02].state == 'off' }}"
  - condition: or
    conditions:
      - "{{ automation_blocker_03 == none }}"
      - "{{ automation_blocker_boolean_03 and states[automation_blocker_03].state == 'on' }}"
      - "{{ not automation_blocker_boolean_03 and states[automation_blocker_03].state == 'off' }}"
  # Check if elevation input exist or is below desired value, otherwise do not run
  - condition: template
    value_template: "{{ (elevation_check == none) or (state_attr('sun.sun','elevation') <= elevation_check | float(90)) }}"
    


action:
  - choose:
      # Trigger to state == "on"
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'on' }}" 
        sequence:
          - choose:
              # Morning Scene
              - conditions:
                  - "{{ scene_morning != 'scene.none'}}"
                  - condition: time
                    after: !input time_scene_morning
                    before: !input time_scene_day
                sequence:
                  - scene: !input scene_morning
              # Day Scene              
              - conditions:
                  - "{{ scene_day != 'scene.none'}}"
                  - condition: time
                    after: !input time_scene_day
                    before: !input time_scene_evening
                sequence:
                  - scene: !input scene_day
              # Evening Scene              
              - conditions:
                  - "{{ scene_evening != 'scene.none'}}"
                  - condition: time
                    after: !input time_scene_evening
                    before: !input time_scene_night
                sequence:
                  - scene: !input scene_evening
              # Night Scene              
              - conditions:
                  - "{{ scene_night != 'scene.none'}}"
                  - condition: time
                    after: !input time_scene_night
                    before: !input time_scene_morning
                sequence:
                  - scene: !input scene_night
            # If State -> "On" defaulting to turn light on
              - choose:
              - conditions: "{{ now().strftime('%H:%M:%S') < morning_time }}"
                sequence:
                - service: media_player.volume_set
                  entity_id: !input radio_target
                  data:
                    volume_level: "{{ (morning_volume|float) / 100 }}"
                - service: media_player.play_media
                  data:
                    entity_id: !input radio_target
                    media_content_id: "{{ states('input_text.radio_url.state') }}"
                    media_content_type: "music"
                
              
      - conditions: "{{ now().strftime('%H:%M:%S') >= morning_time and now().strftime('%H:%M:%S') < daytime_time }}"
        sequence:
          - service: media_player.volume_set
                  entity_id: !input radio_target
                  data:
                    volume_level: "{{ (daytime_volume|float) / 100 }}"
                - service: media_player.play_media
                  data:
                    entity_id: !input radio_target
                    media_content_id: "{{ states('input_text.radio_url.state') }}"
                    media_content_type: "music"
              
      - conditions: "{{ now().strftime('%H:%M:%S') >= daytime_time and now().strftime('%H:%M:%S') < evening_time }}"
        sequence:
          - service: media_player.turn_on
            entity_id: !input radio_target
          - service: media_player.volume_set
            entity_id: !input radio_target
            data:
              volume_level: "{{ (evening_volume|float) / 100 }}"
            default:
              - service: light.turn_on
                target: !input light_target
              - service: media_player.play_media
                  data:
                    entity_id: !input radio_target
                    media_content_id: "{{ states('input_text.radio_url.state') }}"
                    media_content_type: "music"
      # Trigger to state = "off"
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'off' }}"
          # Check if no motion blocker exist or in in desired state, otherwise do not run any no motion action            
          - condition: or
            conditions:
              - "{{ no_motion_blocker == none }}"
              - "{{ no_motion_blocker_boolean and states[no_motion_blocker].state == 'on' }}"
              - "{{ not no_motion_blocker_boolean and states[no_motion_blocker].state == 'off' }}"
        sequence:          
          - choose:
              # Used if ambient scene is true and in ambient scene time frame
              - conditions:
                  - "{{ scene_ambient != 'scene.none' }}"
                  - condition: time
                    after: !input time_scene_ambient_start
                    before: !input time_scene_ambient_end
                sequence:
                  - scene: !input scene_ambient
              # Used if default no motion scene is set
              - conditions:
                  - "{{ scene_no_motion != 'scene.none' }}"
                sequence:
                  - scene: !input scene_no_motion
              # If State -> "off" default to turn lights off
            default:
              - service: light.turn_off
                target: !input light_target
              - service: media_player.turn_off
                entity_id: !input radio_target